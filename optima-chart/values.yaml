# Default values for optima-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

account:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    name: accountsservice
    pullPolicy: Always
    tag: latest
  nameOverride: "account"
  fullnameOverride: "account"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3001
    targetPort: 3001
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This segment is for Auth Values

auth:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: authservice
  nameOverride: "auth"
  fullnameOverride: "auth"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This segment is for DB Values

db:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: dbservice
  nameOverride: "db"
  fullnameOverride: "db"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30
##This segment is for Expenditure

expenditure:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: expenditurereport
  nameOverride: "expenditure"
  fullnameOverride: "expenditure"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3010
    targetPort: 3010
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This segment is for ManageSI

managesi:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: managesiservice
  nameOverride: "managesi"
  fullnameOverride: "managesi"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3006
    targetPort: 3006
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This segment is for mortgage

mortgage:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: mortgageservice
  nameOverride: "mortgage"
  fullnameOverride: "mortgage"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3012
    targetPort: 3012
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This segment is for Offerings

offering:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: offeringsservice
  nameOverride: "offering"
  fullnameOverride: "offering"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3003
    targetPort: 3003
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This segment is for payout

payout:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: payoutservice
  nameOverride: "payout"
  fullnameOverride: "payout"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3002
    targetPort: 3002
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This segment is for poolingfund

poolingFund:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: "latest"
    name: poolingfundsservice
  nameOverride: "poolingfund"
  fullnameOverride: "poolingfund"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3007
    targetPort: 3007
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This is for portingfund

portingFund:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: portingfundsservice
  nameOverride: "portingfund"
  fullnameOverride: "portingfund"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3008
    targetPort: 3008
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This is for twowaypooling

twoWayPooling:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: twowaypoolingservice
  nameOverride: "twowaypooling"
  fullnameOverride: "twowaypooling"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3009
    targetPort: 3009
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

##This is for wms

wms:
  replicaCount: 1
  image:
    repository: gcr.io/learning-283508
    pullPolicy: Always
    tag: latest
    name: wmsservice
  nameOverride: "wms"
  fullnameOverride: "wms"
  imagePullSecrets: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    type: ClusterIP
    port: 3011
    targetPort: 3011
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: []
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    {}
    #Add this to provision the resources you want
  # autoscaling:
  #   enabled: false
  #   minReplicas: 1
  #   maxReplicas: 100
  #   targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  registry:
  probes:
    initialDelaySeconds: 60
    periodSeconds: 30

###########################################################################################################
##############################  SPRING BOOT MICROSERVICES VALUES STARTS HERE ##############################
###########################################################################################################

budget:
  name: budget
  budgetOverride: budget
  image:
    repository: gcr.io/buoyant-algebra-276307/budget
    tag: latest
    imagePullPolicy: Always
  service:
    type: ClusterIP
    port: 8100
    targetPort: 8100

category:
  name: category
  categoryOverride: category
  image:
    repository: gcr.io/buoyant-algebra-276307/category
    tag: latest
    imagePullPolicy: Always
  service:
    type: ClusterIP
    port: 8050
    targetPort: 8050

transaction:
  name: transaction
  transactionOverride: transaction
  image:
    repository: gcr.io/buoyant-algebra-276307/transaction
    tag: latest
    imagePullPolicy: Always
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080

spendanalysis:
  name: spendanalysis
  spendanalysisOverride: spendanalysis
  image:
    repository: gcr.io/buoyant-algebra-276307/spend
    tag: latest
    imagePullPolicy: Always
  service:
    type: ClusterIP
    port: 8101
    targetPort: 8101

savinganalysis:
  name: savinganalysis
  savinganalysisOverride: savinganalysis
  image:
    repository: gcr.io/buoyant-algebra-276307/savings
    tag: latest
    imagePullPolicy: Always
  service:
    type: ClusterIP
    port: 8200
    targetPort: 8200

eureka:
  name: eureka
  eurekaOverride: eureka
  image:
    repository: gcr.io/buoyant-algebra-276307/eureka
    tag: latest
    imagePullPolicy: Always
  service:
    type: LoadBalancer
    port: 8761
    targetPort: 8761

springadmin:
  name: springadmin
  springadminOverride: springadmin
  image:
    repository: gcr.io/buoyant-algebra-276307/springadmin
    tag: latest
    imagePullPolicy: Always
  service:
    type: LoadBalancer
    port: 9090
    targetPort: 9090

#########################################################################################################
##############################  SPRING BOOT MICROSERVICES VALUES ENDS HERE ##############################
#########################################################################################################

nameOverride: "optima"
fullnameOverride: "optima"
replicaCount: 1
imagePullSecrets: []
probes:
  springservice:
    initialDelaySeconds: 60
    periodSeconds: 30

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  hosts:
    host: test.optima.com
    paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

registry:
